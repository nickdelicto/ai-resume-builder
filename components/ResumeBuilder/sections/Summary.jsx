import React, { useState, useEffect, useContext } from 'react';
import styles from './Sections.module.css';
import { useResumeContext } from '../ResumeContext';
import { toast } from 'react-hot-toast';

const Summary = ({ data, updateData, jobContext, onNavigateToSection }) => {
  const [summary, setSummary] = useState(data || '');
  const [isGenerating, setIsGenerating] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [showContextWarning, setShowContextWarning] = useState(false);
  const [showLengthWarning, setShowLengthWarning] = useState(false);
  
  // Minimum required characters for manual input to have enough context
  const MIN_SUMMARY_LENGTH = 30;
  
  // Get resume context to access experience data
  const resumeContext = useResumeContext();
  const experienceData = resumeContext?.resumeData?.experience || [];
  
  // Function to navigate to the Experience section
  const navigateToExperience = (e) => {
    e.preventDefault();
    if (onNavigateToSection) {
      onNavigateToSection('experience');
    }
  };

  useEffect(() => {
    if (data !== undefined) {
      setSummary(data);
      
      // If summary already has content when component first mounts,
      // assume it was imported and mark it as already auto-generated to prevent
      // automatic generation
      if (data && data.length > 0) {
        setHasAutoGenerated(true);
      }
    }
  }, [data]);
  
  // Monitor experience data changes to auto-generate summary when first experience is added
  useEffect(() => {
    // Check if we have enough experience data to generate a summary
    const hasEnoughContext = experienceData && 
      experienceData.length > 0 && 
      experienceData[0].title && 
      experienceData[0].company && 
      experienceData[0].description;
    
    // Only auto-generate if we have experience data, summary is empty, and we haven't auto-generated yet
    if (hasEnoughContext && !summary && !hasAutoGenerated && !isGenerating) {
      setHasAutoGenerated(true);
      generateSummaryFromContext(false);
    }
  }, [experienceData, summary, hasAutoGenerated, isGenerating]);
  
  const handleChange = (e) => {
    const value = e.target.value;
    setSummary(value);
    updateData(value);
    
    // Clear warnings when user types
    if (value && showContextWarning) {
      setShowContextWarning(false);
    }
    if (value && showLengthWarning) {
      setShowLengthWarning(false);
    }
  };
  
  // Generate summary based on experience data and optionally existing text
  const generateSummaryFromContext = async (useExistingText = false) => {
    setIsGenerating(true);
    
    try {
      // Get the personal information from resume context
      const personalInfo = resumeContext?.resumeData?.personalInfo || {};
      
      // Prepare the API request payload
      const payload = {
        existingSummary: useExistingText ? summary : null,
        professionalContext: {
          title: experienceData[0]?.title || '',
          linkedin: personalInfo.linkedin || '',
          website: personalInfo.website || ''
        },
        experience: experienceData.map(exp => ({
          title: exp.title || '',
          company: exp.company || '',
          startDate: exp.startDate || '',
          endDate: exp.endDate || '',
          description: exp.description || ''
        })),
        education: resumeContext?.resumeData?.education || [],
        skills: resumeContext?.resumeData?.skills || [],
        jobContext: jobContext?.description || null,
        action: useExistingText ? 'improve' : 'generate'
      };
      
      // Call our API endpoint
      const response = await fetch('/api/generate-summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || 'Failed to generate summary');
      }
      
      const data = await response.json();
      
      if (data.summary) {
        setSummary(data.summary);
        updateData(data.summary);
    } else {
        throw new Error('No summary generated');
      }
    } catch (error) {
      console.error('Error generating summary:', error);
      
      // Create custom error messages based on error type
      let errorMessage = 'We\'re having trouble generating your professional summary.';
      
      // Check for common API errors
      if (error.message.includes('API key')) {
        errorMessage = 'Our AI service is temporarily unavailable.';
      } else if (error.message.includes('rate limit')) {
        errorMessage = 'We\'ve reached our AI service limit for the moment.';
      } else if (error.message.includes('timeout') || error.message.includes('network')) {
        errorMessage = 'Connection to our AI service timed out.';
      }
      
      toast.error(
        <div>
          <p>{errorMessage}</p>
          <p>Please try again later or write your summary manually.</p>
        </div>,
        { duration: 7000 }
      );
      
      // Set a fallback generic summary if there's nothing in the field yet
      if (!summary) {
        const fallbackSummary = "Experienced professional with a track record of delivering results. Combines technical expertise with strong communication skills to drive project success and organizational growth. Committed to continuous improvement and excellence in all professional endeavors.";
        setSummary(fallbackSummary);
        updateData(fallbackSummary);
      }
    } finally {
      setIsGenerating(false);
    }
  };
  
  // These template-based generation functions are no longer needed since we're using the API
  
  const generateSummary = async () => {
    // Clear any existing warnings
    setShowContextWarning(false);
    setShowLengthWarning(false);
    
    // Check if there's already text in the summary field
    const hasExistingText = summary && summary.trim().length > 0;
    
    // Check if we have enough experience data to generate a meaningful summary
    const hasEnoughContext = experienceData && 
      experienceData.length > 0 && 
      experienceData[0].title && 
      experienceData[0].company;
    
    // If the user has typed something but it's too short, warn them
    if (hasExistingText && summary.trim().length < MIN_SUMMARY_LENGTH && !hasEnoughContext) {
      setShowLengthWarning(true);
      // Clear warning after 10 seconds (increased from 5)
      setTimeout(() => setShowLengthWarning(false), 10000);
      return;
    }
    
    // If we have neither experience data nor sufficient manual text, show context warning
    if (!hasEnoughContext && !hasExistingText) {
      setShowContextWarning(true);
      // Clear warning after 10 seconds (increased from 5)
      setTimeout(() => setShowContextWarning(false), 10000);
      return;
    }
    
    // Generate summary based on available context
    generateSummaryFromContext(hasExistingText);
  };

  return (
    <div className={styles.sectionContainer}>
      <h2 className={styles.sectionTitle}>Professional Summary</h2>
      <p className={styles.sectionDescription}>
        Your professional summary gives employers a snapshot of your skills and experience.
      </p>
      
      <div className={styles.formGroup}>
        <textarea
          value={summary}
          onChange={handleChange}
          placeholder="Write a 3-4 sentence summary highlighting your skills and experience..."
          className={styles.formInput}
          rows={6}
        />
      </div>
      
      {showContextWarning && (
        <div className={`${styles.completionHint} ${styles.warningHint}`}>
          <span className={styles.hintIcon}>‚ö†Ô∏è</span>
          <span className={styles.hintText}>
            <strong>Please <a href="#" className={styles.sectionLink} onClick={navigateToExperience}>add work experience first</a>!</strong> This helps our AI generate a more personalized summary. Or, you can write your own summary directly in the text area above.
          </span>
        </div>
      )}
      
      {showLengthWarning && (
        <div className={`${styles.completionHint} ${styles.warningHint}`}>
          <span className={styles.hintIcon}>‚ö†Ô∏è</span>
          <span className={styles.hintText}>
            <strong>Please write at least {MIN_SUMMARY_LENGTH} characters!</strong> For the AI to create a great summary, provide at least a sentence or two about your skills and experience. Alternatively, you can <a href="#" className={styles.sectionLink} onClick={navigateToExperience}>add work experience first</a>.
          </span>
        </div>
      )}
      
      <button 
        className={`${styles.aiButton} ${isGenerating ? styles.generating : ''}`}
        onClick={generateSummary}
        disabled={isGenerating}
      >
        {isGenerating ? 'Generating...' : hasAutoGenerated || summary ? '‚ú® Improve Summary' : '‚ú® Generate Professional Summary'}
      </button>
      
      <div className={styles.completionHint}>
        <span className={styles.hintIcon}>üí°</span>
        <span className={styles.hintText}>
          <strong>Pro Tip:</strong> {summary ? 'Our AI will use both your text AND your work experience to craft an optimized professional summary with industry-specific keywords. It may completely rewrite your text for better ATS performance.' : 'Keep your summary concise but impactful, focusing on your most relevant qualifications for the job you want.'}
        </span>
      </div>
    </div>
  );
};

export default Summary; 
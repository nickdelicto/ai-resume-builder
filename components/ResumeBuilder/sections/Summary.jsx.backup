import React, { useState, useEffect, useContext } from 'react';
import styles from './Sections.module.css';
import { useResumeContext } from '../ResumeContext';

const Summary = ({ data, updateData, jobContext }) => {
  const [summary, setSummary] = useState(data || '');
  const [isGenerating, setIsGenerating] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [showContextWarning, setShowContextWarning] = useState(false);
  const [showLengthWarning, setShowLengthWarning] = useState(false);
  
  // Minimum required characters for manual input to have enough context
  const MIN_SUMMARY_LENGTH = 30;
  
  // Get resume context to access experience data
  const resumeContext = useResumeContext();
  const experienceData = resumeContext?.resumeData?.experience || [];
  
  useEffect(() => {
    if (data !== undefined) {
      setSummary(data);
    }
  }, [data]);
  
  // Monitor experience data changes to auto-generate summary when first experience is added
  useEffect(() => {
    // Check if we have enough experience data to generate a summary
    const hasEnoughContext = experienceData && 
      experienceData.length > 0 && 
      experienceData[0].title && 
      experienceData[0].company && 
      experienceData[0].description;
    
    // Only auto-generate if we have experience data, summary is empty, and we haven't auto-generated yet
    if (hasEnoughContext && !summary && !hasAutoGenerated && !isGenerating) {
      setHasAutoGenerated(true);
      generateSummaryFromContext(false);
    }
  }, [experienceData, summary, hasAutoGenerated, isGenerating]);
  
  const handleChange = (e) => {
    const value = e.target.value;
    setSummary(value);
    updateData(value);
    
    // Clear warnings when user types
    if (value && showContextWarning) {
      setShowContextWarning(false);
    }
    if (value && showLengthWarning) {
      setShowLengthWarning(false);
    }
  };
  
  // Generate summary based on experience data and optionally existing text
  const generateSummaryFromContext = async (useExistingText = false) => {
    setIsGenerating(true);
    
    // In a real implementation, this would call an AI API with the experience data and existing text
    // For now, we'll simulate it with a timeout and template text
    setTimeout(() => {
      // Get all experience entries as context
      const firstExperience = experienceData[0];
      
      let generatedSummary = "";
      
      // If we should use existing text and it exists, use it as context for rewriting
      if (useExistingText && summary.trim().length > 0) {
        // In a real implementation, we would send the existing text to the AI API
        // along with all experience data for context
        
        // For simulation purposes, we'll create a more complete "rewrite" that 
        // incorporates elements of the manual text but potentially rewrites it entirely
        const rewrittenSummary = generateCompleteRewrite(summary, experienceData);
        generatedSummary = rewrittenSummary;
      } else {
        // Generate from scratch using experience data
        if (firstExperience) {
          const { title, company, description } = firstExperience;
          
          // Create a more personalized summary based on role
          if (title.toLowerCase().includes('manager') || title.toLowerCase().includes('director')) {
            generatedSummary = `Results-driven ${title} with proven experience in team leadership and strategic planning. Demonstrated success in optimizing operations and driving organizational growth at ${company}. Skilled in stakeholder management, budget optimization, and fostering collaborative team environments to achieve business objectives.`;
          } else if (title.toLowerCase().includes('developer') || title.toLowerCase().includes('engineer')) {
            generatedSummary = `Innovative ${title} with expertise in developing scalable solutions that drive business success. Proven track record of implementing high-performance systems at ${company}. Combines technical expertise with collaborative approach to deliver projects that exceed expectations and enhance user experience.`;
          } else if (title.toLowerCase().includes('sales') || title.toLowerCase().includes('account')) {
            generatedSummary = `Dynamic ${title} with consistent record of exceeding targets and expanding market presence. Demonstrated ability to build strategic client relationships and identify growth opportunities at ${company}. Combines consultative selling approach with deep market understanding to drive revenue and enhance customer satisfaction.`;
          } else if (title.toLowerCase().includes('market')) {
            generatedSummary = `Creative ${title} with expertise in developing integrated campaigns that drive engagement and growth. Proven success in enhancing brand presence and optimizing marketing ROI at ${company}. Skilled in digital strategies, content development, and data-driven decision making to achieve measurable results.`;
          } else {
            generatedSummary = `Accomplished professional with extensive experience in ${title.toLowerCase().includes('specialist') ? title : title + ' role'}. Demonstrated history of delivering impactful results at ${company}. Combines analytical thinking with collaborative approach to drive projects forward and achieve organizational objectives.`;
          }
        } else {
          // Fallback summary if no experience data exists (shouldn't happen with our checks)
          generatedSummary = "Results-driven professional with experience delivering impactful solutions. Skilled in collaborating with cross-functional teams to drive project success and organizational growth. Combining technical expertise with strong communication skills to translate complex concepts into actionable insights.";
        }
      }
      
      setSummary(generatedSummary);
      updateData(generatedSummary);
      setIsGenerating(false);
    }, 1500);
  };
  
  // Generate a potentially complete rewrite of the summary using both manual input and job experience
  const generateCompleteRewrite = (manualText, experiences) => {
    if (!experiences || experiences.length === 0) {
      // If no job experiences available, base rewrite on manual text only
      return enhanceManualTextOnly(manualText);
    }
    
    // Extract key information from experiences
    const titles = experiences.map(exp => exp.title).filter(Boolean);
    const companies = experiences.map(exp => exp.company).filter(Boolean);
    
    // Determine the most relevant job title (usually the most recent/first in the array)
    const primaryTitle = titles[0] || "professional";
    const primaryCompany = companies[0] || "";
    
    // Identify the career field based on job titles
    let careerField = "";
    let keywords = [];
    let strengths = [];
    
    // Determine career field from job titles
    if (titles.some(title => title && title.toLowerCase().includes('manage') || title.toLowerCase().includes('director') || title.toLowerCase().includes('lead'))) {
      careerField = "management";
      keywords = ['leadership', 'strategic planning', 'team development', 'operational excellence', 'stakeholder management'];
      strengths = ['driving organizational change', 'optimizing team performance', 'delivering business results'];
    } else if (titles.some(title => title && title.toLowerCase().includes('develop') || title.toLowerCase().includes('engineer') || title.toLowerCase().includes('program'))) {
      careerField = "technology";
      keywords = ['technical expertise', 'solution architecture', 'innovation', 'software development', 'system design'];
      strengths = ['building scalable solutions', 'solving complex problems', 'implementing cutting-edge technologies'];
    } else if (titles.some(title => title && title.toLowerCase().includes('sales') || title.toLowerCase().includes('account'))) {
      careerField = "sales";
      keywords = ['relationship building', 'revenue growth', 'client retention', 'consultative selling', 'business development'];
      strengths = ['exceeding targets', 'building strategic partnerships', 'driving market expansion'];
    } else if (titles.some(title => title && title.toLowerCase().includes('market') || title.toLowerCase().includes('brand'))) {
      careerField = "marketing";
      keywords = ['brand development', 'campaign management', 'market analysis', 'digital marketing', 'content strategy'];
      strengths = ['increasing engagement', 'optimizing conversion rates', 'enhancing brand visibility'];
    } else {
      careerField = "professional";
      keywords = ['project management', 'analytical thinking', 'cross-functional collaboration', 'process improvement'];
      strengths = ['delivering results', 'optimizing efficiency', 'driving innovation'];
    }
    
    // Calculate combined years of experience
    const yearsOfExperience = calculateYearsOfExperience(experiences);
    const experiencePhrase = yearsOfExperience > 0 
      ? `with ${yearsOfExperience}+ years of experience` 
      : "with proven experience";
    
    // Extract any personal strengths mentioned in the manual text
    // This preserves some of the user's self-assessment
    const manualStrengths = extractStrengthsFromText(manualText);
    if (manualStrengths.length > 0) {
      strengths = [...new Set([...manualStrengths, ...strengths])].slice(0, 3);
    }
    
    // Select a few keywords to include
    const selectedKeywords = keywords.slice(0, 3);
    
    // Construct a completely new summary using extracted insights
    let rewrittenSummary = "";
    
    // First sentence: Role, experience level, and primary strengths
    rewrittenSummary += `${getImpactfulAdjective(careerField)} ${primaryTitle} ${experiencePhrase} in ${strengths[0]}.`;
    
    // Second sentence: Key achievements and skills
    rewrittenSummary += ` Demonstrates expertise in ${selectedKeywords.join(', ')}, with a proven track record of ${strengths[1]}.`;
    
    // Third sentence: Value proposition and company specifics if available
    if (primaryCompany) {
      rewrittenSummary += ` At ${primaryCompany}, contributed to ${strengths[2]} through ${selectedKeywords[0]} and ${selectedKeywords[1]}.`;
    } else {
      rewrittenSummary += ` Consistently delivers value through ${strengths[2]} and commitment to organizational success.`;
    }
    
    return rewrittenSummary;
  };
  
  // Helper function to calculate approximate years of experience
  const calculateYearsOfExperience = (experiences) => {
    // In a real implementation, we would calculate this from dates
    // For this simulation, we'll assume each experience is about 2 years
    return Math.min(20, experiences.length * 2);
  };
  
  // Helper function to get an impactful adjective based on career field
  const getImpactfulAdjective = (field) => {
    const adjectives = {
      management: ["Results-driven", "Strategic", "Accomplished"],
      technology: ["Innovative", "Solution-oriented", "Technical"],
      sales: ["Dynamic", "Performance-driven", "Client-focused"],
      marketing: ["Creative", "Marketing-savvy", "Brand-focused"],
      professional: ["Accomplished", "Detail-oriented", "Versatile"]
    };
    
    const fieldAdjectives = adjectives[field] || adjectives.professional;
    return fieldAdjectives[Math.floor(Math.random() * fieldAdjectives.length)];
  };
  
  // Helper function to extract potential strengths from manually entered text
  const extractStrengthsFromText = (text) => {
    const strengthIndicators = [
      "expert in", "skilled in", "specializing in", "proficient in", 
      "experienced in", "focused on", "passionate about", "dedicated to"
    ];
    
    let foundStrengths = [];
    
    strengthIndicators.forEach(indicator => {
      const regex = new RegExp(`${indicator}\\s+([\\w\\s,]+?)(?:\\.|,|;|and|with)`, 'i');
      const match = text.match(regex);
      if (match && match[1]) {
        foundStrengths.push(match[1].trim());
      }
    });
    
    return foundStrengths;
  };
  
  // Helper function for enhancing manual text when no job experience is available
  const enhanceManualTextOnly = (manualText) => {
    // Start with the manual text
    let enhanced = manualText;
    
    // Add professional tone and structure
    enhanced = enhanced.replace(/^I am /i, "");
    enhanced = enhanced.replace(/^My name is [^.]*\.\s*/i, "");
    
    // Add professional prefix if needed
    if (!enhanced.match(/^(A |An |The |Experienced |Professional |Skilled |Accomplished |Results-driven |Innovative )/i)) {
      enhanced = "Professional " + enhanced.charAt(0).toLowerCase() + enhanced.slice(1);
    }
    
    // Add ATS-friendly keywords if they're missing
    const commonKeywords = [
      "results-oriented", "problem-solving", "communication skills", 
      "collaboration", "team player", "detail-oriented", "analytical thinking"
    ];
    
    // Check if we should add some keywords
    let keywordsToAdd = commonKeywords.filter(kw => !enhanced.toLowerCase().includes(kw.toLowerCase()));
    
    if (keywordsToAdd.length > 0) {
      // Select 2-3 keywords to add
      keywordsToAdd = keywordsToAdd.slice(0, Math.min(3, keywordsToAdd.length));
      
      enhanced = enhanced.replace(/\.$/, '') + 
        `. Demonstrates expertise in ${keywordsToAdd.join(', ')}, with a commitment to delivering exceptional results.`;
    }
    
    // Ensure proper formatting and ending
    enhanced = enhanced.replace(/\s+/g, ' ').trim();
    if (!enhanced.endsWith('.')) {
      enhanced += '.';
    }
    
    return enhanced;
  };
  
  const generateSummary = async () => {
    // Clear any existing warnings
    setShowContextWarning(false);
    setShowLengthWarning(false);
    
    // Check if there's already text in the summary field
    const hasExistingText = summary && summary.trim().length > 0;
    
    // Check if we have enough experience data to generate a meaningful summary
    const hasEnoughContext = experienceData && 
      experienceData.length > 0 && 
      experienceData[0].title && 
      experienceData[0].company;
    
    // If the user has typed something but it's too short, warn them
    if (hasExistingText && summary.trim().length < MIN_SUMMARY_LENGTH && !hasEnoughContext) {
      setShowLengthWarning(true);
      // Clear warning after 5 seconds
      setTimeout(() => setShowLengthWarning(false), 5000);
      return;
    }
    
    // If we have neither experience data nor sufficient manual text, show context warning
    if (!hasEnoughContext && !hasExistingText) {
      setShowContextWarning(true);
      // Clear warning after 5 seconds
      setTimeout(() => setShowContextWarning(false), 5000);
      return;
    }
    
    // Generate summary based on available context
    generateSummaryFromContext(hasExistingText);
  };

  return (
    <div className={styles.sectionContainer}>
      <h2 className={styles.sectionTitle}>Professional Summary</h2>
      <p className={styles.sectionDescription}>
        Your professional summary gives employers a snapshot of your skills and experience.
      </p>
      
      <div className={styles.formGroup}>
        <textarea
          value={summary}
          onChange={handleChange}
          placeholder="Write a 3-4 sentence summary highlighting your skills and experience..."
          className={styles.formInput}
          rows={6}
        />
      </div>
      
      {showContextWarning && (
        <div className={`${styles.completionHint} ${styles.warningHint}`}>
          <span className={styles.hintIcon}>⚠️</span>
          <span className={styles.hintText}>
            <strong>Please add work experience first!</strong> This helps our AI generate a more personalized summary. Or, you can write your own summary directly in the text area above.
          </span>
        </div>
      )}
      
      {showLengthWarning && (
        <div className={`${styles.completionHint} ${styles.warningHint}`}>
          <span className={styles.hintIcon}>⚠️</span>
          <span className={styles.hintText}>
            <strong>Please write a bit more!</strong> For the AI to create a great summary, provide at least a sentence or two about your skills and experience.
          </span>
        </div>
      )}
      
      <button 
        className={`${styles.aiButton} ${isGenerating ? styles.generating : ''}`}
        onClick={generateSummary}
        disabled={isGenerating}
      >
        {isGenerating ? 'Generating...' : hasAutoGenerated || summary ? '✨ Improve Summary' : '✨ Generate Professional Summary'}
      </button>
      
      <div className={styles.completionHint}>
        <span className={styles.hintIcon}>💡</span>
        <span className={styles.hintText}>
          <strong>Pro Tip:</strong> {summary ? 'Our AI will use your text as input to craft a professional summary optimized for ATS systems. It may completely rewrite it to include industry-specific keywords.' : 'Keep your summary concise but impactful, focusing on your most relevant qualifications for the job you want.'}
        </span>
      </div>
    </div>
  );
};

export default Summary; 